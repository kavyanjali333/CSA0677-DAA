1.
# Coin Change Problem
def coin_change(coins, amount):
    dp = [float('inf')] * (amount + 1)
    dp[0] = 0
    for coin in coins:
        for i in range(coin, amount + 1):
            dp[i] = min(dp[i], dp[i - coin] + 1)
    return dp[amount] if dp[amount] != float('inf') else -1
2.
# Knapsack Problem
def knapsack(weights, values, capacity):
    n = len(weights)
    dp = [[0] * (capacity + 1) for _ in range(n + 1)]
    for i in range(1, n + 1):
        for w in range(1, capacity + 1):
            if weights[i - 1] > w:
                dp[i][w] = dp[i - 1][w]
            else:
                dp[i][w] = max(dp[i - 1][w], values[i - 1] + dp[i - 1][w - weights[i - 1]])
    return dp[n][capacity]


3.
# Job Sequencing with Deadlines
def job_sequencing(jobs):
    jobs.sort(key=lambda x: x[2], reverse=True)
    max_deadline = max(jobs, key=lambda x: x[1])[1]
    result = [0] * max_deadline
    for job in jobs:
        for i in range(job[1] - 1, -1, -1):
            if result[i] == 0:
                result[i] = job[0]
                break
    return result




4.
# Dijkstra's Algorithm
import heapq

def dijkstra(graph, start):
    distances = {node: float('inf') for node in graph}
    distances[start] = 0
    queue = [(0, start)]
    while queue:
        current_distance, current_node = heapq.heappop(queue)
        if current_distance > distances[current_node]:
            continue
        for neighbor, weight in graph[current_node].items():
            distance = current_distance + weight
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(queue, (distance, neighbor))
    return distances


5.# Huffman Trees and Codes
from heapq import heappush, heappop, heapify
from collections import defaultdict

def huffman(freq):
    heap = [[weight, [symbol, ""]] for symbol, weight in freq.items()]
    heapify(heap)
    while len(heap) > 1:
        lo = heappop(heap)
        hi = heappop(heap)
        for pair in lo[1:]:
            pair[1] = '0' + pair[1]
        for pair in hi[1:]:
            pair[1] = '1' + pair[1]
        heappush(heap, [lo[0] + hi[0]] + lo[1:] + hi[1:])
    return sorted(heappop(heap)[1:], key=lambda p: (len(p[-1]), p))


6.
# Container Loading
def container_loading(weights, capacity):
    weights.sort(reverse=True)
    containers = [[] for _ in range(len(weights))]
    for w in weights:
        for c in containers:
            if sum(c) + w <= capacity:
                c.append(w)
                break
    return containers


7.
# Minimum Spanning Tree
def kruskal(graph):
    parent = {node: node for node in graph}
    def find(node):
        if parent[node] != node:
            parent[node] = find(parent[node])
        return parent[node]
    def union(node1, node2):
        root1 = find(node1)
        root2 = find(node2)
        parent[root1] = root2
    mst = []
    edges = [(graph[u][v], u, v) for u in graph for v in graph[u]]
    edges.sort()
    for weight, u, v in edges:
        if find(u) != find(v):
            union(u, v)
            mst.append((u, v, weight))
    return mst

8.# Kruskal's Algorithm
def kruskal(graph):
    parent = {node: node for node in graph}
    def find(node):
        if parent[node] != node:
            parent[node] = find(parent[node])
        return parent[node]
    def union(node1, node2):
        root1 = find(node1)
        root2 = find(node2)
        parent[root1] = root2
    mst = []
    edges = [(graph[u][v], u, v) for u in graph for v in graph[u]]
    edges.sort()
    for weight, u, v in edges:
        if find(u) != find(v):
            union(u, v)
            mst.append((u, v, weight))
    return mst



9.
# Prim's Algorithm
import heapq

def prim(graph):
    mst = []
    visited = set()
    start_node = next(iter(graph))
    visited.add(start_node)
    edges = [(weight, start_node, node) for node, weight in graph[start_node].items()]
    heapq.heapify(edges)
    while edges:
        weight, from_node, to_node = heapq.heappop(edges)
        if to_node not in visited:
            visited.add(to_node)
            mst.append((from_node, to_node, weight))
            for next_node, next_weight in graph[to_node].items():
                if next_node not in visited:
                    heapq.heappush(edges, (next_weight, to_node, next_node))
    return mst


10.

# Boruvka's Algorithm
def boruvka(graph):
    parent = {node: node for node in graph}
    mst = []
    while len(mst) < len(graph) - 1:
        cheapest = {node: (float('inf'), None) for node in graph}
        for u in graph:
            for v in graph[u]:
                root_u = find(u)
                root_v = find(v)
                if root_u != root_v and graph[u][v] < cheapest[root_u][0]:
                    cheapest[root_u] = (graph[u][v], v)
        for node, (weight, neighbor) in cheapest.items():
            if neighbor is not None:
                mst.append((node, neighbor, weight))
                union(node, neighbor)
    return mst
