from collections import defaultdict

def most_profitable_path(n, edges, amount):
    graph = defaultdict(list)
    for a, b in edges:
        graph[a].append(b)
        graph[b].append(a)

    def dfs(node, parent):
        nonlocal max_profit
        if node == 0:
            return max(amount[node], 0)
        
        profit = max(amount[node], 0)
        for neighbor in graph[node]:
            if neighbor != parent:
                profit += max(dfs(neighbor, node) / 2, 0)
        
        max_profit = max(max_profit, profit)
        return profit

    max_profit = 0
    dfs(0, -1)
    return max_profit

# Example Usage
n = 5
edges = [[0, 1], [0, 2], [1, 3], [1, 4]]
amount = [1, -2, 3, 4, -5]
print(most_profitable_path(n, edges, amount))
